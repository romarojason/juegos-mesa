<!DOCTYPE html>

<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Club de Juegos de Mesa</title>
    <meta name="description" content="Herramientas completas para gestionar sesiones de juegos de mesa">
    <meta name="theme-color" content="#7c3aed">

```
<!-- PWA Manifest -->
<link rel="manifest" href="manifest.json">

<!-- iOS PWA Support -->
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<meta name="apple-mobile-web-app-title" content="Juegos Mesa">
<link rel="apple-touch-icon" href="icons/icon-192x192.png">

<!-- Favicon -->
<link rel="icon" type="image/x-icon" href="favicon.ico">

<!-- Tailwind CSS -->
<script src="https://cdn.tailwindcss.com"></script>

<!-- React -->
<script crossorigin src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
<script crossorigin src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>

<!-- Lucide Icons -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.min.js"></script>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
    }
    
    /* PWA Install Button */
    #install-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
        display: none;
        background: linear-gradient(45deg, #ec4899, #8b5cf6);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 50px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
    }
    
    #install-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
    }
    
    /* Custom animations */
    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
    
    .animate-spin {
        animation: spin 1s linear infinite;
    }
    
    @keyframes bounce {
        0%, 20%, 53%, 80%, 100% {
            transform: translateY(0);
        }
        40%, 43% {
            transform: translateY(-30px);
        }
        70% {
            transform: translateY(-15px);
        }
        90% {
            transform: translateY(-4px);
        }
    }
    
    .animate-bounce {
        animation: bounce 1s ease infinite;
    }
</style>
```

</head>
<body>
    <div id="root"></div>

```
<!-- PWA Install Button -->
<button id="install-button">
    📱 Instalar App
</button>

<script type="text/babel">
    const { useState, useEffect, useRef } = React;
    const { Plus, RotateCcw, Save, Dice1, Coins, Timer, Play, Pause, RotateCw } = lucide;

    const BoardGameToolkit = () => {
        const [activeTab, setActiveTab] = useState(0);
        const [games, setGames] = useState(['Scrabble', 'Rummikub', 'Virus', 'Fluxx']);
        const [players, setPlayers] = useState(['Dayra', 'Josué']);
        const [newGame, setNewGame] = useState('');
        const [newPlayer, setNewPlayer] = useState('');
        const [gameSpinning, setGameSpinning] = useState(false);
        const [playerSpinning, setPlayerSpinning] = useState(false);
        const [selectedGame, setSelectedGame] = useState('');
        const [selectedPlayer, setSelectedPlayer] = useState('');
        const [gameHistory, setGameHistory] = useState([]);

        // Función para obtener la fecha actual en horario de México Central (UTC-6)
        const getMexicoCentralTime = () => {
            const now = new Date();
            const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
            const mexicoTime = new Date(utc + (-6 * 3600000));
            return mexicoTime.toISOString().slice(0, 16);
        };

        // Registro de juego
        const [gameDate, setGameDate] = useState(getMexicoCentralTime());
        const [venue, setVenue] = useState('');
        const [currentGame, setCurrentGame] = useState('');
        const [gamePlayers, setGamePlayers] = useState([]);
        const [winner, setWinner] = useState('');

        // Herramientas
        const [diceResult, setDiceResult] = useState(null);
        const [coinResult, setCoinResult] = useState(null);
        const [diceRolling, setDiceRolling] = useState(false);
        const [coinFlipping, setCoinFlipping] = useState(false);
        const [timerSeconds, setTimerSeconds] = useState(30);
        const [timerRunning, setTimerRunning] = useState(false);
        const [timeLeft, setTimeLeft] = useState(30);

        const gameWheelRef = useRef(null);
        const playerWheelRef = useRef(null);
        const timerRef = useRef(null);

        useEffect(() => {
            if (timerRunning && timeLeft > 0) {
                timerRef.current = setTimeout(() => {
                    setTimeLeft(timeLeft - 1);
                }, 1000);
            } else if (timeLeft === 0) {
                setTimerRunning(false);
                alert('⏰ ¡Tiempo terminado!');
            }
            return () => clearTimeout(timerRef.current);
        }, [timerRunning, timeLeft]);

        const spinWheel = (type) => {
            if (type === 'game') {
                setGameSpinning(true);
                const randomIndex = Math.floor(Math.random() * games.length);
                setTimeout(() => {
                    setSelectedGame(games[randomIndex]);
                    setCurrentGame(games[randomIndex]);
                    setGameSpinning(false);
                }, 2000);
            } else {
                setPlayerSpinning(true);
                const randomIndex = Math.floor(Math.random() * players.length);
                setTimeout(() => {
                    setSelectedPlayer(players[randomIndex]);
                    setVenue(players[randomIndex]);
                    setGamePlayers([...players]);
                    setPlayerSpinning(false);
                }, 2000);
            }
        };

        const addGame = () => {
            if (newGame.trim() && !games.includes(newGame.trim())) {
                setGames([...games, newGame.trim()]);
                setNewGame('');
            }
        };

        const addPlayer = () => {
            if (newPlayer.trim() && !players.includes(newPlayer.trim())) {
                setPlayers([...players, newPlayer.trim()]);
                setNewPlayer('');
            }
        };

        const saveGame = () => {
            if (currentGame && winner && gamePlayers.length > 0) {
                const gameRecord = {
                    id: Date.now(),
                    date: gameDate,
                    venue,
                    game: currentGame,
                    players: gamePlayers,
                    winner,
                    timestamp: new Date(new Date().getTime() + (new Date().getTimezoneOffset() * 60000) + (-6 * 3600000)).toLocaleString('es-MX')
                };
                setGameHistory([...gameHistory, gameRecord]);

                // Reset form
                setGameDate(getMexicoCentralTime());
                setVenue('');
                setCurrentGame('');
                setGamePlayers([]);
                setWinner('');
                
                alert('🎉 ¡Partida guardada exitosamente!');
            } else {
                alert('⚠️ Por favor completa todos los campos');
            }
        };

        const rollDice = () => {
            setDiceRolling(true);
            setDiceResult(null);
            setTimeout(() => {
                setDiceResult(Math.floor(Math.random() * 6) + 1);
                setDiceRolling(false);
            }, 1000);
        };

        const flipCoin = () => {
            setCoinFlipping(true);
            setCoinResult(null);
            setTimeout(() => {
                setCoinResult(Math.random() > 0.5 ? 'Cara' : 'Cruz');
                setCoinFlipping(false);
            }, 1200);
        };

        const startTimer = () => {
            if (!timerRunning) {
                setTimeLeft(timerSeconds);
                setTimerRunning(true);
            } else {
                setTimerRunning(false);
            }
        };

        const resetTimer = () => {
            setTimerRunning(false);
            setTimeLeft(timerSeconds);
        };

        const formatTime = (seconds) => {
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        };

        const tabs = [
            { name: '🎲 Ruletas', icon: '🎯' },
            { name: '📋 Registro', icon: '📝' },
            { name: '📊 Historial', icon: '📈' },
            { name: '🛠️ Herramientas', icon: '⚙️' }
        ];

        return (
            <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white">
                <div className="container mx-auto p-4 max-w-4xl">
                    <h1 className="text-4xl font-bold text-center mb-8 bg-gradient-to-r from-yellow-400 to-pink-400 bg-clip-text text-transparent">
                        🎮 Club de Juegos de Mesa
                    </h1>

                    {/* Tabs */}
                    <div className="flex flex-wrap justify-center mb-8 bg-black/20 rounded-lg p-2">
                        {tabs.map((tab, index) => (
                            <button
                                key={index}
                                onClick={() => setActiveTab(index)}
                                className={`px-4 py-2 m-1 rounded-lg font-semibold transition-all duration-300 ${
                                    activeTab === index
                                        ? 'bg-gradient-to-r from-pink-500 to-purple-600 text-white shadow-lg transform scale-105'
                                        : 'bg-white/10 hover:bg-white/20 text-gray-300 hover:text-white'
                                }`}
                            >
                                {tab.icon} {tab.name}
                            </button>
                        ))}
                    </div>

                    {/* Tab Content */}
                    {activeTab === 0 && (
                        <div className="space-y-8">
                            <div className="text-center mb-8">
                                <h2 className="text-3xl font-bold mb-4">🎯 Ruletas de Selección</h2>
                                <p className="text-lg text-gray-300">¡Gira las ruletas para elegir aleatoriamente!</p>
                            </div>
                            
                            <div className="grid md:grid-cols-2 gap-8">
                                {/* Game Wheel */}
                                <div className="bg-black/30 rounded-xl p-6 backdrop-blur-sm">
                                    <h3 className="text-2xl font-bold mb-4 text-center">🎮 Juegos</h3>
                                    <div className="relative">
                                        <div 
                                            ref={gameWheelRef}
                                            className={`w-48 h-48 mx-auto rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center text-xl font-bold shadow-2xl transition-transform duration-2000 ${
                                                gameSpinning ? 'animate-spin' : ''
                                            }`}
                                            style={{
                                                animationDuration: gameSpinning ? '2s' : '0s',
                                                animationTimingFunction: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
                                            }}
                                        >
                                            {gameSpinning ? '🌟' : (selectedGame || '🎲')}
                                        </div>
                                        <div className="mt-4 text-center">
                                            {selectedGame && (
                                                <p className="text-lg mb-2">🏆 Juego seleccionado: <span className="text-yellow-400 font-bold">{selectedGame}</span></p>
                                            )}
                                        </div>
                                    </div>
                                    
                                    <div className="mt-6 space-y-3">
                                        <div className="flex gap-2">
                                            <input
                                                type="text"
                                                value={newGame}
                                                onChange={(e) => setNewGame(e.target.value)}
                                                placeholder="Nuevo juego..."
                                                className="flex-1 px-3 py-2 bg-white/10 rounded-lg border border-white/20 focus:border-pink-400 focus:outline-none"
                                                onKeyPress={(e) => e.key === 'Enter' && addGame()}
                                            />
                                            <button
                                                onClick={addGame}
                                                className="px-4 py-2 bg-green-500 hover:bg-green-600 rounded-lg transition-colors"
                                            >
                                                <Plus size={20} />
                                            </button>
                                        </div>
                                        
                                        <button
                                            onClick={() => spinWheel('game')}
                                            disabled={gameSpinning}
                                            className="w-full py-3 bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 rounded-lg font-bold transition-all duration-300 disabled:opacity-50 flex items-center justify-center gap-2"
                                        >
                                            <RotateCcw size={20} />
                                            {gameSpinning ? '🌀 Girando...' : '🎯 Girar Ruleta'}
                                        </button>
                                        
                                        <div className="text-sm text-gray-300">
                                            <p>Juegos disponibles: {games.join(', ')}</p>
                                        </div>
                                    </div>
                                </div>

                                {/* Player Wheel */}
                                <div className="bg-black/30 rounded-xl p-6 backdrop-blur-sm">
                                    <h3 className="text-2xl font-bold mb-4 text-center">👥 Jugadores</h3>
                                    <div className="relative">
                                        <div 
                                            ref={playerWheelRef}
                                            className={`w-48 h-48 mx-auto rounded-full bg-gradient-to-r from-green-500 to-blue-600 flex items-center justify-center text-xl font-bold shadow-2xl transition-transform duration-2000 ${
                                                playerSpinning ? 'animate-spin' : ''
                                            }`}
                                            style={{
                                                animationDuration: playerSpinning ? '2s' : '0s',
                                                animationTimingFunction: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
                                            }}
                                        >
                                            {playerSpinning ? '✨' : (selectedPlayer || '👤')}
                                        </div>
                                        <div className="mt-4 text-center">
                                            {selectedPlayer && (
                                                <p className="text-lg mb-2">🎯 Jugador seleccionado: <span className="text-green-400 font-bold">{selectedPlayer}</span></p>
                                            )}
                                        </div>
                                    </div>
                                    
                                    <div className="mt-6 space-y-3">
                                        <div className="flex gap-2">
                                            <input
                                                type="text"
                                                value={newPlayer}
                                                onChange={(e) => setNewPlayer(e.target.value)}
                                                placeholder="Nuevo jugador..."
                                                className="flex-1 px-3 py-2 bg-white/10 rounded-lg border border-white/20 focus:border-green-400 focus:outline-none"
                                                onKeyPress={(e) => e.key === 'Enter' && addPlayer()}
                                            />
                                            <button
                                                onClick={addPlayer}
                                                className="px-4 py-2 bg-green-500 hover:bg-green-600 rounded-lg transition-colors"
                                            >
                                                <Plus size={20} />
                                            </button>
                                        </div>
                                        
                                        <button
                                            onClick={() => spinWheel('player')}
                                            disabled={playerSpinning}
                                            className="w-full py-3 bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 rounded-lg font-bold transition-all duration-300 disabled:opacity-50 flex items-center justify-center gap-2"
                                        >
                                            <RotateCcw size={20} />
                                            {playerSpinning ? '🌀 Girando...' : '🎯 Girar Ruleta'}
                                        </button>
                                        
                                        <div className="text-sm text-gray-300">
                                            <p>Jugadores disponibles: {players.join(', ')}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {activeTab === 1 && (
                        <div className="space-y-6">
                            <div className="text-center mb-8">
                                <h2 className="text-3xl font-bold mb-4">📋 Registro de Partida</h2>
                                <p className="text-lg text-gray-300">Registra los detalles de tu sesión de juego</p>
                            </div>
                            
                            <div className="bg-black/30 rounded-xl p-6 backdrop-blur-sm">
                                <div className="grid md:grid-cols-2 gap-6 mb-6">
                                    <div>
                                        <label className="block text-sm font-medium mb-2">📅 Fecha y Hora</label>
                                        <input
                                            type="datetime-local"
                                            value={gameDate}
                                            onChange={(e) => setGameDate(e.target.value)}
                                            className="w-full px-3 py-2 bg-white/10 rounded-lg border border-white/20 focus:border-blue-400 focus:outline-none"
                                        />
                                    </div>
                                    
                                    <div>
                                        <label className="block text-sm font-medium mb-2">🏠 Sede</label>
                                        <select
                                            value={venue}
                                            onChange={(e) => setVenue(e.target.value)}
                                            className="w-full px-3 py-2 bg-white/10 rounded-lg border border-white/20 focus:border-blue-400 focus:outline-none"
                                        >
                                            <option value="">Seleccionar sede...</option>
                                            {players.map(player => (
                                                <option key={player} value={player}>{player}</option>
                                            ))}
                                        </select>
                                    </div>
                                </div>
                                
                                <div className="mb-6">
                                    <label className="block text-sm font-medium mb-2">🎮 Juego</label>
                                    <input
                                        type="text"
                                        value={currentGame}
                                        onChange={(e) => setCurrentGame(e.target.value)}
                                        placeholder="Nombre del juego..."
                                        className="w-full px-3 py-2 bg-white/10 rounded-lg border border-white/20 focus:border-blue-400 focus:outline-none"
                                    />
                                </div>
                                
                                <div className="bg-white/10 rounded-lg p-4">
                                    <h3 className="text-xl font-bold mb-4">👥 Jugadores y Ganador</h3>
                                    <div className="grid md:grid-cols-2 gap-4">
                                        <div>
                                            <h4 className="font-semibold mb-2">Jugadores</h4>
                                            <div className="space-y-2">
                                                {gamePlayers.map((player, index) => (
                                                    <div key={index} className="flex items-center justify-between p-2 bg-white/10 rounded">
                                                        <span>{player}</span>
                                                        <button
                                                            onClick={() => setWinner(player)}
                                                            className={`px-3 py-1 rounded text-sm transition-colors ${
                                                                winner === player
                                                                    ? 'bg-yellow-500 text-black font-bold'
                                                                    : 'bg-white/20 hover:bg-white/30'
                                                            }`}
                                                        >
                                                            {winner === player ? '👑 Ganador' : 'Seleccionar'}
                                                        </button>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                        
                                        <div>
                                            <h4 className="font-semibold mb-2">Ganador Seleccionado</h4>
                                            <div className="p-4 bg-yellow-500/20 rounded-lg text-center">
                                                {winner ? (
                                                    <div>
                                                        <div className="text-2xl mb-2">👑</div>
                                                        <div className="font-bold text-yellow-400">{winner}</div>
                                                    </div>
                                                ) : (
                                                    <div className="text-gray-400">Selecciona un ganador</div>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <button
                                    onClick={saveGame}
                                    className="w-full mt-6 py-3 bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 rounded-lg font-bold transition-all duration-300 flex items-center justify-center gap-2"
                                >
                                    <Save size={20} />
                                    💾 Guardar Partida
                                </button>
                            </div>
                        </div>
                    )}

                    {activeTab === 2 && (
                        <div className="space-y-6">
                            <div className="text-center mb-8">
                                <h2 className="text-3xl font-bold mb-4">📊 Historial de Partidas</h2>
                                <p className="text-lg text-gray-300">Estadísticas y registro de todas las partidas</p>
                            </div>
                            
                            <div className="bg-black/30 rounded-xl p-6 backdrop-blur-sm">
                                {gameHistory.length === 0 ? (
                                    <div className="text-center py-8">
                                        <div className="text-4xl mb-4">📊</div>
                                        <p className="text-xl text-gray-400">No hay partidas registradas aún</p>
                                        <p className="text-gray-500 mt-2">¡Comienza a jugar y registra tus partidas!</p>
                                    </div>
                                ) : (
                                    <div className="space-y-4">
                                        <div className="text-center mb-6">
                                            <p className="text-xl">🎮 Total de partidas: <span className="font-bold text-yellow-400">{gameHistory.length}</span></p>
                                        </div>
                                        
                                        <div className="overflow-x-auto">
                                            <table className="w-full border-collapse">
                                                <thead>
                                                    <tr className="bg-white/10">
                                                        <th className="p-3 text-left border border-white/20">📅 Fecha</th>
                                                        <th className="p-3 text-left border border-white/20">🏠 Sede</th>
                                                        <th className="p-3 text-left border border-white/20">🎮 Juego</th>
                                                        <th className="p-3 text-left border border-white/20">👥 Jugadores</th>
                                                        <th className="p-3 text-left border border-white/20">👑 Ganador</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {gameHistory.map((game) => (
                                                        <tr key={game.id} className="hover:bg-white/5">
                                                            <td className="p-3 border border-white/20">{new Date(game.date).toLocaleDateString('es-MX')}</td>
                                                            <td className="p-3 border border-white/20">{game.venue}</td>
                                                            <td className="p-3 border border-white/20 font-semibold">{game.game}</td>
                                                            <td className="p-3 border border-white/20">{game.players.join(', ')}</td>
                                                            <td className="p-3 border border-white/20">
                                                                <span className="inline-flex items-center gap-1 bg-yellow-500/20 px-2 py-1 rounded text-yellow-400 font-bold">
                                                                    👑 {game.winner}
                                                                </span>
                                                            </td>
                                                        </tr>
                                                    ))}
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}

                    {activeTab === 3 && (
                        <div className="space-y-6">
                            <div className="text-center mb-8">
                                <h2 className="text-3xl font-bold mb-4">🛠️ Herramientas de Juego</h2>
                                <p className="text-lg text-gray-300">Utilidades para tus partidas</p>
                            </div>
                            
                            <div className="grid md:grid-cols-3 gap-6">
                                {/* Dice */}
                                <div className="bg-black/30 rounded-xl p-6 backdrop-blur-sm text-center">
                                    <h3 className="text-2xl font-bold mb-4">🎲 Dado</h3>
                                    <div className={`w-24 h-24 mx-auto bg-white rounded-lg flex items-center justify-center text-4xl font-bold text-black mb-4 shadow-lg transition-transform duration-300 ${
                                        diceRolling ? 'animate-bounce' : ''
                                    }`}>
                                        {diceRolling ? '🎲' : (diceResult || '?')}
                                    </div>
                                    <button
                                        onClick={rollDice}
                                        disabled={diceRolling}
                                        className="w-full py-3 bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 rounded-lg font-bold transition-all duration-300 flex items-center justify-center gap-2 disabled:opacity-50"
                                    >
                                        <Dice1 size={20} />
                                        {diceRolling ? '🎲 Lanzando...' : '🎲 Lanzar Dado'}
                                    </button>
                                </div>

                                {/* Coin */}
                                <div className="bg-black/30 rounded-xl p-6 backdrop-blur-sm text-center">
                                    <h3 className="text-2xl font-bold mb-4">🪙 Moneda</h3>
                                    <div className={`w-24 h-24 mx-auto bg-yellow-400 rounded-full flex items-center justify-center text-2xl font-bold text-black mb-4 shadow-lg transition-transform duration-300 ${
                                        coinFlipping ? 'animate-spin' : ''
                                    }`}
                                    style={{
                                        animationDuration: coinFlipping ? '0.3s' : '0s',
                                        animationIterationCount: coinFlipping ? '4' : '1'
                                    }}>
                                        {coinFlipping ? '🪙' : (coinResult || '?')}
                                    </div>
                                    <button
                                        onClick={flipCoin}
                                        disabled={coinFlipping}
                                        className="w-full py-3 bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 rounded-lg font-bold transition-all duration-300 flex items-center justify-center gap-2 disabled:opacity-50"
                                    >
                                        <Coins size={20} />
                                        {coinFlipping ? '🪙 Girando...' : '🪙 Lanzar Moneda'}
                                    </button>
                                </div>

                                {/* Timer */}
                                <div className="bg-black/30 rounded-xl p-6 backdrop-blur-sm text-center">
                                    <h3 className="text-2xl font-bold mb-4">⏰ Temporizador</h3>
                                    <div className="text-4xl font-bold mb-4 text-yellow-400">
                                        {formatTime(timeLeft)}
                                    </div>
                                    
                                    <div className="flex items-center justify-center gap-2 mb-4">
                                        <button
                                            onClick={() => setTimerSeconds(Math.max(10, timerSeconds - 10))}
                                            className="px-3 py-1 bg-red-500 hover:bg-red-600 rounded text-sm"
                                        >
                                            -10s
                                        </button>
                                        <span className="text-sm">⚙️ {timerSeconds}s</span>
                                        <button
                                            onClick={() => setTimerSeconds(timerSeconds + 10)}
                                            className="px-3 py-1 bg-green-500 hover:bg-green-600 rounded text-sm"
                                        >
                                            +10s
                                        </button>
                                    </div>
                                    
                                    <div className="space-y-2">
                                        <button
                                            onClick={startTimer}
                                            className="w-full py-2 bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 rounded-lg font-bold transition-all duration-300 flex items-center justify-center gap-2"
                                        >
                                            {timerRunning ? <Pause size={16} /> : <Play size={16} />}
                                            {timerRunning ? '⏸️ Pausar' : '▶️ Iniciar'}
                                        </button>
                                        <button
                                            onClick={resetTimer}
                                            className="w-full py-2 bg-gray-500 hover:bg-gray-600 rounded-lg font-bold transition-all duration-300 flex items-center justify-center gap-2"
                                        >
                                            <RotateCw size={16} />
                                            🔄 Reiniciar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    // Render the app
    ReactDOM.render(<BoardGameToolkit />, document.getElementById('root'));

    // PWA Installation
    let deferredPrompt;
    const installButton = document.getElementById('install-button');

    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        installButton.style.display = 'block';
    });

    installButton.addEventListener('click', async () => {
        if (deferredPrompt) {
            deferredPrompt.prompt();
            const { outcome } = await deferredPrompt.userChoice;
            console.log(`User response to the install prompt: ${outcome}`);
            deferredPrompt = null;
            installButton.style.display = 'none';
        }
    });

    // Register Service Worker
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('sw.js')
                .then((registration) => {
                    console.log('SW registered: ', registration);
                })
                .catch((registrationError) => {
                    console.log('SW registration failed: ', registrationError);
                });
        });
    }
</script>
```

</body>
</html>