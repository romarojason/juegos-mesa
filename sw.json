const CACHE_NAME = ‘board-game-toolkit-v1’;
const urlsToCache = [
‘/’,
‘/index.html’,
‘/manifest.json’,
‘/icons/icon-192x192.png’,
‘/icons/icon-512x512.png’,
‘https://cdn.tailwindcss.com’,
‘https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js’,
‘https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js’,
‘https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js’,
‘https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.min.js’
];

// Install event
self.addEventListener(‘install’, event => {
console.log(‘Service Worker: Installing…’);
event.waitUntil(
caches.open(CACHE_NAME)
.then(cache => {
console.log(‘Service Worker: Caching files’);
return cache.addAll(urlsToCache);
})
.then(() => {
console.log(‘Service Worker: Cache complete’);
return self.skipWaiting();
})
.catch(err => {
console.log(‘Service Worker: Cache failed’, err);
})
);
});

// Activate event
self.addEventListener(‘activate’, event => {
console.log(‘Service Worker: Activating…’);
event.waitUntil(
caches.keys().then(cacheNames => {
return Promise.all(
cacheNames.map(cacheName => {
if (cacheName !== CACHE_NAME) {
console.log(‘Service Worker: Deleting old cache’, cacheName);
return caches.delete(cacheName);
}
})
);
}).then(() => {
console.log(‘Service Worker: Activated’);
return self.clients.claim();
})
);
});

// Fetch event
self.addEventListener(‘fetch’, event => {
if (event.request.method !== ‘GET’) return;

event.respondWith(
caches.match(event.request)
.then(response => {
// Return cached version or fetch from network
if (response) {
console.log(‘Service Worker: Serving from cache’, event.request.url);
return response;
}

```
    console.log('Service Worker: Fetching from network', event.request.url);
    return fetch(event.request)
      .then(response => {
        // Check if response is valid
        if (!response || response.status !== 200 || response.type !== 'basic') {
          return response;
        }

        // Clone the response
        const responseToCache = response.clone();

        // Add to cache
        caches.open(CACHE_NAME)
          .then(cache => {
            cache.put(event.request, responseToCache);
          });

        return response;
      })
      .catch(err => {
        console.log('Service Worker: Fetch failed', err);
        // Return offline page or default response
        if (event.request.destination === 'document') {
          return caches.match('/');
        }
      });
  })
```

);
});

// Background sync for offline functionality
self.addEventListener(‘sync’, event => {
if (event.tag === ‘background-sync’) {
console.log(‘Service Worker: Background sync’);
event.waitUntil(doBackgroundSync());
}
});

async function doBackgroundSync() {
// Handle any pending data sync when back online
console.log(‘Service Worker: Performing background sync’);
}

// Push notifications (if needed later)
self.addEventListener(‘push’, event => {
if (event.data) {
const data = event.data.json();
const options = {
body: data.body,
icon: ‘/icons/icon-192x192.png’,
badge: ‘/icons/icon-72x72.png’,
vibrate: [100, 50, 100],
data: {
dateOfArrival: Date.now(),
primaryKey: 1
}
};

```
event.waitUntil(
  self.registration.showNotification(data.title, options)
);
```

}
});

// Notification click event
self.addEventListener(‘notificationclick’, event => {
console.log(‘Service Worker: Notification click received’);
event.notification.close();

event.waitUntil(
clients.openWindow(’/’)
);
});